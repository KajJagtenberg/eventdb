// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventStoreClient is the client API for EventStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventStoreClient interface {
	GetStream(ctx context.Context, in *GetStreamRequest, opts ...grpc.CallOption) (*GetStreamResponse, error)
	GetGlobalStream(ctx context.Context, in *GetGlobalStreamRequest, opts ...grpc.CallOption) (*GetGlobalStreamResponse, error)
	AppendToStream(ctx context.Context, in *AppendToStreamRequest, opts ...grpc.CallOption) (*AppendToStreamResponse, error)
	GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*Event, error)
	EventCount(ctx context.Context, in *EventCountRequest, opts ...grpc.CallOption) (*EventCountResponse, error)
	StreamCount(ctx context.Context, in *StreamCountRequest, opts ...grpc.CallOption) (*StreamCountResponse, error)
	ListStreams(ctx context.Context, in *ListStreamsRequest, opts ...grpc.CallOption) (*ListStreamsReponse, error)
	Size(ctx context.Context, in *SizeRequest, opts ...grpc.CallOption) (*SizeResponse, error)
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
}

type eventStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewEventStoreClient(cc grpc.ClientConnInterface) EventStoreClient {
	return &eventStoreClient{cc}
}

func (c *eventStoreClient) GetStream(ctx context.Context, in *GetStreamRequest, opts ...grpc.CallOption) (*GetStreamResponse, error) {
	out := new(GetStreamResponse)
	err := c.cc.Invoke(ctx, "/api.EventStore/GetStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventStoreClient) GetGlobalStream(ctx context.Context, in *GetGlobalStreamRequest, opts ...grpc.CallOption) (*GetGlobalStreamResponse, error) {
	out := new(GetGlobalStreamResponse)
	err := c.cc.Invoke(ctx, "/api.EventStore/GetGlobalStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventStoreClient) AppendToStream(ctx context.Context, in *AppendToStreamRequest, opts ...grpc.CallOption) (*AppendToStreamResponse, error) {
	out := new(AppendToStreamResponse)
	err := c.cc.Invoke(ctx, "/api.EventStore/AppendToStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventStoreClient) GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/api.EventStore/GetEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventStoreClient) EventCount(ctx context.Context, in *EventCountRequest, opts ...grpc.CallOption) (*EventCountResponse, error) {
	out := new(EventCountResponse)
	err := c.cc.Invoke(ctx, "/api.EventStore/EventCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventStoreClient) StreamCount(ctx context.Context, in *StreamCountRequest, opts ...grpc.CallOption) (*StreamCountResponse, error) {
	out := new(StreamCountResponse)
	err := c.cc.Invoke(ctx, "/api.EventStore/StreamCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventStoreClient) ListStreams(ctx context.Context, in *ListStreamsRequest, opts ...grpc.CallOption) (*ListStreamsReponse, error) {
	out := new(ListStreamsReponse)
	err := c.cc.Invoke(ctx, "/api.EventStore/ListStreams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventStoreClient) Size(ctx context.Context, in *SizeRequest, opts ...grpc.CallOption) (*SizeResponse, error) {
	out := new(SizeResponse)
	err := c.cc.Invoke(ctx, "/api.EventStore/Size", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventStoreClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/api.EventStore/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventStoreServer is the server API for EventStore service.
// All implementations must embed UnimplementedEventStoreServer
// for forward compatibility
type EventStoreServer interface {
	GetStream(context.Context, *GetStreamRequest) (*GetStreamResponse, error)
	GetGlobalStream(context.Context, *GetGlobalStreamRequest) (*GetGlobalStreamResponse, error)
	AppendToStream(context.Context, *AppendToStreamRequest) (*AppendToStreamResponse, error)
	GetEvent(context.Context, *GetEventRequest) (*Event, error)
	EventCount(context.Context, *EventCountRequest) (*EventCountResponse, error)
	StreamCount(context.Context, *StreamCountRequest) (*StreamCountResponse, error)
	ListStreams(context.Context, *ListStreamsRequest) (*ListStreamsReponse, error)
	Size(context.Context, *SizeRequest) (*SizeResponse, error)
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	mustEmbedUnimplementedEventStoreServer()
}

// UnimplementedEventStoreServer must be embedded to have forward compatible implementations.
type UnimplementedEventStoreServer struct {
}

func (UnimplementedEventStoreServer) GetStream(context.Context, *GetStreamRequest) (*GetStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (UnimplementedEventStoreServer) GetGlobalStream(context.Context, *GetGlobalStreamRequest) (*GetGlobalStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGlobalStream not implemented")
}
func (UnimplementedEventStoreServer) AppendToStream(context.Context, *AppendToStreamRequest) (*AppendToStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendToStream not implemented")
}
func (UnimplementedEventStoreServer) GetEvent(context.Context, *GetEventRequest) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (UnimplementedEventStoreServer) EventCount(context.Context, *EventCountRequest) (*EventCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EventCount not implemented")
}
func (UnimplementedEventStoreServer) StreamCount(context.Context, *StreamCountRequest) (*StreamCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamCount not implemented")
}
func (UnimplementedEventStoreServer) ListStreams(context.Context, *ListStreamsRequest) (*ListStreamsReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStreams not implemented")
}
func (UnimplementedEventStoreServer) Size(context.Context, *SizeRequest) (*SizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Size not implemented")
}
func (UnimplementedEventStoreServer) Version(context.Context, *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedEventStoreServer) mustEmbedUnimplementedEventStoreServer() {}

// UnsafeEventStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventStoreServer will
// result in compilation errors.
type UnsafeEventStoreServer interface {
	mustEmbedUnimplementedEventStoreServer()
}

func RegisterEventStoreServer(s grpc.ServiceRegistrar, srv EventStoreServer) {
	s.RegisterService(&EventStore_ServiceDesc, srv)
}

func _EventStore_GetStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreServer).GetStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EventStore/GetStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreServer).GetStream(ctx, req.(*GetStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventStore_GetGlobalStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGlobalStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreServer).GetGlobalStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EventStore/GetGlobalStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreServer).GetGlobalStream(ctx, req.(*GetGlobalStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventStore_AppendToStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendToStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreServer).AppendToStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EventStore/AppendToStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreServer).AppendToStream(ctx, req.(*AppendToStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventStore_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EventStore/GetEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreServer).GetEvent(ctx, req.(*GetEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventStore_EventCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreServer).EventCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EventStore/EventCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreServer).EventCount(ctx, req.(*EventCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventStore_StreamCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreServer).StreamCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EventStore/StreamCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreServer).StreamCount(ctx, req.(*StreamCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventStore_ListStreams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStreamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreServer).ListStreams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EventStore/ListStreams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreServer).ListStreams(ctx, req.(*ListStreamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventStore_Size_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreServer).Size(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EventStore/Size",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreServer).Size(ctx, req.(*SizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventStore_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EventStore/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventStore_ServiceDesc is the grpc.ServiceDesc for EventStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.EventStore",
	HandlerType: (*EventStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStream",
			Handler:    _EventStore_GetStream_Handler,
		},
		{
			MethodName: "GetGlobalStream",
			Handler:    _EventStore_GetGlobalStream_Handler,
		},
		{
			MethodName: "AppendToStream",
			Handler:    _EventStore_AppendToStream_Handler,
		},
		{
			MethodName: "GetEvent",
			Handler:    _EventStore_GetEvent_Handler,
		},
		{
			MethodName: "EventCount",
			Handler:    _EventStore_EventCount_Handler,
		},
		{
			MethodName: "StreamCount",
			Handler:    _EventStore_StreamCount_Handler,
		},
		{
			MethodName: "ListStreams",
			Handler:    _EventStore_ListStreams_Handler,
		},
		{
			MethodName: "Size",
			Handler:    _EventStore_Size_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _EventStore_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api.proto",
}
