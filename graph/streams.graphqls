type RecordedEvent {
  id: String!
  stream: String!
  version: Int!
  type: String!
  data: String!
  metadata: String!
  added_at: Time!
}

scalar Time

type Stream {
  id: ID!
  size: Int!
  created_at: Time!
}

extend type Query {
  streams(skip: Int! = 0, limit: Int! = 0): [Stream!]!
  stream(id: String!): Stream
  loadFromStream(
    stream: ID!
    skip: Int! = 0
    limit: Int! = 0
  ): [RecordedEvent!]!
  loadFromAll(offset: String! = "", limit: Int! = 0): [RecordedEvent!]!
}

input EventData {
  type: String!
  data: String! = ""
  metadata: String! = ""
}

extend type Mutation {
  append(
    stream: ID!
    version: Int!
    events: [EventData!]!
  ): [RecordedEvent!]!
}
