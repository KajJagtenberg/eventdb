type Event {
  id: String!
  stream: String!
  version: Int!
  type: String!
  data: String!
  metadata: String!
  added_at: Time!
}

scalar Time

# type Stream {
#   name: String!
#   events(skip: Int = 0, limit: Int = 0): [Event!]!
#   size: Int!
# }

type Stream {
  name: String!
  size: Int!
}

extend type Query {
  streams(skip: Int! = 0, limit: Int! = 0): [Stream!]!
  stream(id: String!, skip: Int! = 0, limit: Int! = 0): [Event!]!
  all(offset: String! = "", limit: Int! = 0): [Event!]!
}

input EventData {
  type: String!
  data: String!
  metadata: String! = ""
}

extend type Mutation {
  append(stream: String!, version: Int!, events: [EventData!]!): [Event!]!
}
