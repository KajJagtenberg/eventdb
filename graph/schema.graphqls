type Event {
  id: String!
  stream: Stream!
  version: Int!
  type: String!
  data: String!
  metadata: String!
  added_at: Time!
}

scalar Time

type Stream {
  name: String!
  events(skip: Int = 0, limit: Int = 0): [Event!]!
  size: Int!
}

type Streams {
  streams: [Stream!]!
  total: Int!
}

extend type Query {
  streams(skip: Int! = 0, limit: Int! = 0): Streams!
  stream(id: String!): Stream
  all(offset: String!, limit: Int = 0): [Event!]!
}

input EventData {
  type: String!
  data: String!
  metadata: String
}

extend type Mutation {
  append(stream: String!, version: Int!, events: [EventData!]!): Stream!
}
