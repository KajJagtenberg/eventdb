syntax = "proto3";

option go_package="api";

package api;

message Event {
    string id = 1;
    string stream = 2;
    uint32 version = 3;
    string type = 4;
    string data = 5;
    string metadata = 6;
    string causation_id = 7;
    string correlation_id = 8;
    int64 added_at = 9;
}  

message AddEventsRequest {
    message EventData {
        string type = 1;
        string data = 2;
        string metadata = 3;
        string causation_id = 4;
        string correlation_id = 5;
        int64 added_at = 6;
    }
    string stream = 1;
    uint32 version = 2;
    repeated EventData events = 3;
}

message AddEventsResponse {
    repeated Event events = 1;
}

message GetEventsRequest {
    string stream = 1;
    uint32 version = 2;
    uint32 limit = 3;
}

message GetEventsResponse {
    repeated Event events = 1;
}

message LogEventsRequest {
    string offset = 1;
    uint32 limit = 2;
}

message LogEventsResponse {
    repeated Event events = 1;
}

message StreamCountRequest {}

message StreamCountResponse {
    int64 count = 1;
}

message EventCountRequest {}

message EventCountResponse {
    int64 count = 1;
}

message StreamCountEstimateRequest {}

message StreamCountEstimateResponse {
    int64 count = 1;
}

message EventCountEstimateRequest {}

message EventCountEstimateResponse {
    int64 count = 1;
}

service StreamService {
    rpc AddEvents(AddEventsRequest) returns (AddEventsResponse) {}
    rpc GetEvents(GetEventsRequest) returns (GetEventsResponse) {}
    rpc LogEvents(LogEventsRequest) returns (LogEventsResponse) {}
    rpc StreamCount(StreamCountRequest) returns (StreamCountResponse) {}
    rpc EventCount(EventCountRequest) returns (EventCountResponse) {}
    rpc StreamCountEstimate(StreamCountEstimateRequest) returns (StreamCountEstimateResponse) {}
    rpc EventCountEstimate(EventCountEstimateRequest) returns (EventCountEstimateResponse) {}
}

/**/

message ShellRequest {
    string body = 1;
}

message ShellResponse {
    string body = 1;
}

service ShellService {
    rpc Execute(stream ShellRequest) returns (stream ShellResponse) {}
}