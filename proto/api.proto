syntax = "proto3";

package api;

option go_package="./api";

message GetStreamRequest {
    string stream = 1;
    uint32 version = 2;
    uint32 limit = 3;
}

message GetStreamResponse {
    repeated string events = 1;
}

message GetGlobalStreamRequest {
    uint64 offset = 1;
    uint32 limit = 2;
}

message GetGlobalStreamResponse {
    repeated string events = 1;
}

message AppendToStreamRequest {
    string stream = 1;
    int32 version = 2;
    repeated EventData events = 3;
}

message AppendToStreamResponse {
    repeated string events = 1;
}

message GetEventRequest {
    string id = 1;
}

message Event {
    string id = 1;
    string stream = 2;
    uint32 version = 3;
    string type = 4;
    bytes data = 5;
    bytes metadata = 6;
    string causation_id = 7;
    string correlation_id = 8;
    int64 added_at = 9;
}

message EventData {
    string type = 1;
    bytes data = 2;
    bytes metadata = 3;
    string causation_id = 4;
    string correlation_id = 5;
}

message EventCountRequest {}


message EventCountResponse {
    int64 count = 1;
}

message StreamCountRequest {}

message StreamCountResponse {
    int64 count = 1;
}

message ListStreamsRequest {
    uint32 skip = 1;
    uint32 limit = 2;
} 

message ListStreamsReponse {
    repeated string streams = 1;
}

message UptimeRequest {}

message UptimeResponse {
    int64 uptime = 1;
    string uptime_human = 2;
}

message VersionRequest {}

message VersionResponse {
    string version = 1;
}

service EventStore {
    // GET /api/v1/stream/:id
    rpc GetStream(GetStreamRequest) returns (GetStreamResponse) {}

    // GET /api/v1/stream/all
    rpc GetGlobalStream(GetGlobalStreamRequest) returns (GetGlobalStreamResponse) {}

    // POST /api/v1/stream/:id
    rpc AppendToStream(AppendToStreamRequest) returns (AppendToStreamResponse) {}

    // GET // /api/v1/event/:id
    rpc GetEvent(GetEventRequest) returns (Event) {}

    // GET /api/v1/event/count
    rpc EventCount(EventCountRequest) returns (EventCountResponse) {}

    // GET /api/v1/stream/count
    rpc StreamCount(StreamCountRequest) returns (StreamCountResponse) {}

    // GET /api/v1/stream
    rpc ListStreams(ListStreamsRequest) returns (ListStreamsReponse) {}

    // GET /api/v1/version
    rpc Version(VersionRequest) returns (VersionResponse) {}
}